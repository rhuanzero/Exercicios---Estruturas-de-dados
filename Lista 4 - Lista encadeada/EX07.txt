7) No desenvolvimento de um jogo, é necessário armazenar os inimigos que seu personagem
está enfrentando na fase. Um inimigo é definido como uma instância da classe “Inimigo”, que
possui a seguinte estrutura:

public class Inimigo{
	private int vida;
	private double danoPorSegundo;
	public void setVida(int vida);
	public int getVida();
	public void setDanoPorSegundo(double danoPorSegundo);
	public double getDanoPorSegundo();
}

Por sua vez, os inimigos são armazenados em uma lista encadeada que possui os
seguintes métodos:

public void inserir(Inimigo inimigo);
public Inimigo localizar(Inimigo inimigo);
public int efetuarDano(Inimigo inimigo, double dano);

Considere que o método efetuarDano(Inimigo inimigo, double dano)
remove o inimigo da estrutura caso o dano sofrido reduza a vida do objeto inimigo a zero.
Dessa maneira, implemente essa estrutura de dados para o jogo em questão.

Foi adicionado um atributo a classe Inimigo para fazer a comparação ao achar um inimigo: 
private int id;

Métodos adicionados a classe Inimigo:
   public boolean equals(Inimigo inimigo) {
        return this.id == inimigo.id;
    }

Métodos da Classe ListaInimigo:

public void inserir(Inimigo inimigo) {
		Elo p = new Elo(inimigo);
		p.prox = prim;
		prim = p;
	}

	public Inimigo localizar(Inimigo inimigo) {
		Inimigo inimigoFinal=null;
		Elo p;
		for (p = prim;p!=null; p = p.prox){
			if(p.dado.equals(inimigo)) {
				inimigoFinal = inimigo;
				return inimigoFinal;
			}
		}
		return inimigoFinal;
	}

	public int efetuarDano(Inimigo inimigo, double dano) {
		inimigo.setVida((int)(inimigo.getVida()-dano));
		if(inimigo.getVida()<=0){
			for (Elo p = prim;p!=null; p = p.prox){
				Elo q = p.prox;
				if(p.dado.equals(inimigo)){
					prim = prim.prox;
					return inimigo.getVida();
				}
				if(q.dado.equals(inimigo)){
					if(q.prox == null){
						p.prox = null;
						q = null;
						return inimigo.getVida();
					}
					else {
						prim.prox = q.prox;
						q.prox = null;
						return inimigo.getVida();
					}
				}

			}
		}
		return inimigo.getVida();
	}

Complexidade dos métodos:
efetuarDano(Inimigo inimigo, double dano) - O(n)
localizar(Inimigo inimigo) - O(n)
inserir(Inimigo inimigo) - O(1)

Sendo (n == Tamanho da lista)
