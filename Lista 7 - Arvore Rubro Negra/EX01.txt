1) Monte uma árvore binária de busca para cada uma das sequências abaixo. Repita com
árvores rubro-negras. Compare os dois tipos de árvore para cada sequência.
a. 70, 19, 11, 89, 13, 17
b. 23, 15, 41, 11, 13, 14, 50, 38
c. 1, 2, 3, 4, 5, 6, 7


Árvore binária de busca:
a) 			b)			 c)            1
	 70		          23	                         \
       /    \     	      /        \                          2
      19    89 		     15         41                         \
     /  \  /  \            /   \      /   \                         3
    11                    11        38      50                       \
   /  \                  /  \      /  \    /  \                       4
      13                    13                                         \
     /  \                  /  \                                         5
	17                     14                                        \
       /  \	                                                          6
			                                                   \
                                                                            7   
                                                                             \

Árvore rubro-negra: (Nós com (V) são vermelhos, a ausência do (V) significa que é negra)

a)          19                            
        /        \
     13(V)       89
    /   \        /
  11    17   70(V)

b)             23
	  /         \
        13           41
       /  \	    /  \
     11    15     38    50 
	  /      
	14(V)   


c)    
         4
      /     \
     2       6
   /   \    /  \
  1     3  5    7

R: Nos 3 casos, a árvore rubro-negra é balanceada, obtendo menor complexidade na busca, porém tendo a sua implementação mais complexa. O item c) evidencia as vantagens de usar uma RDBST por conta de seu balanceamento, já que, no caso da BST, ela se transformou em uma árvore degenerada (desbalanceada), tal qual uma lista encadeada.
		


		
		
